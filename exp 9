import pandas as pd
import numpy as np
data=pd.read_csv('/home/s5ad2/Downloads/Social_Network_Ads.csv')
data.head(10)

data.isna().sum()

data.drop(columns=['User ID'],inplace=True)
data.head(10)

from sklearn.preprocessing import LabelEncoder
#initialize the labelencoder
le=LabelEncoder()
#fit and transform the categorical column
data['Gender']=le.fit_transform(data['Gender'])

#define the target variables and feature columns
x=data[['Gender','Age','EstimatedSalary']]
y=data['Purchased']

#split the data to train data and test data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.10,random_state=20)

#import and train a KNearest neighbour classifier
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)

#test the knn model
y_pred=knn.predict(x_test)

#print accuracy model
from sklearn.metrics import accuracy_score
#calculate the accuracy on  the original dataset 
original_accuracy=accuracy_score(y_test,y_pred)
print(f"original accuracy:{original_accuracy:.2f}")


#print the classificATION REPORT
from sklearn.metrics import classification_report 
report=classification_report(y_test,y_pred)
print(report)

#print correct and wrong predictions
correct_predictions=0
wrong_predictions=0
for i in range(len(y_test)):
    if y_test.values[i]==y_pred[i]:
        correct_predictions+=1
    else:
        wrong_predictions+=1
print(f"correct predictions :",correct_predictions)
print(f"wrong predictions:",wrong_predictions)

import matplotlib.pyplot as plt
error_rate=[]
#range of k values to test
k_values=range(1,40)
#loop over k values to find the error for each
for k in k_values:
    #create knn classifier with current k
    knn=KNeighborsClassifier(n_neighbors=k)
    
    
    
    knn.fit(x_train,y_train)
    #predict the labels for the test set
    y_pred=knn.predict(x_test)
    #calculate error rate (1-accuracy)
    error=1-accuracy_score(y_test,y_pred)
    #append error rate to the list
    error_rate.append(error)
    
plt.figure(figsize=(10,6))
plt.plot(k_values,error_rate,color='red',linestyle='dashed',marker='o',markerfacecolor='yellow',markersize=10)
plt.title('Error Rate vs K value')
plt.xlabel('K')
plt.ylabel('error rate')
plt.show()
